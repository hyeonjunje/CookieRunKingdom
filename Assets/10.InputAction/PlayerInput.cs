//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/10.InputAction/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""GamePlay"",
            ""id"": ""270a1412-b16e-45df-9a4b-f42eaf7dc879"",
            ""actions"": [
                {
                    ""name"": ""ClickPC"",
                    ""type"": ""Value"",
                    ""id"": ""e46c2dde-9917-4648-ab5c-2a5bf16d89a4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ClickMobile"",
                    ""type"": ""Button"",
                    ""id"": ""b8fe3927-f06f-469e-b492-f82a10c38343"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2204e2cd-1bca-4cbe-954d-915479b1056b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClickPC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eecd10a1-b2cf-4e61-89ca-3f55dc71d817"",
                    ""path"": ""<Touchscreen>/touch*/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClickMobile"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GamePlay
        m_GamePlay = asset.FindActionMap("GamePlay", throwIfNotFound: true);
        m_GamePlay_ClickPC = m_GamePlay.FindAction("ClickPC", throwIfNotFound: true);
        m_GamePlay_ClickMobile = m_GamePlay.FindAction("ClickMobile", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GamePlay
    private readonly InputActionMap m_GamePlay;
    private IGamePlayActions m_GamePlayActionsCallbackInterface;
    private readonly InputAction m_GamePlay_ClickPC;
    private readonly InputAction m_GamePlay_ClickMobile;
    public struct GamePlayActions
    {
        private @PlayerInput m_Wrapper;
        public GamePlayActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ClickPC => m_Wrapper.m_GamePlay_ClickPC;
        public InputAction @ClickMobile => m_Wrapper.m_GamePlay_ClickMobile;
        public InputActionMap Get() { return m_Wrapper.m_GamePlay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamePlayActions set) { return set.Get(); }
        public void SetCallbacks(IGamePlayActions instance)
        {
            if (m_Wrapper.m_GamePlayActionsCallbackInterface != null)
            {
                @ClickPC.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnClickPC;
                @ClickPC.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnClickPC;
                @ClickPC.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnClickPC;
                @ClickMobile.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnClickMobile;
                @ClickMobile.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnClickMobile;
                @ClickMobile.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnClickMobile;
            }
            m_Wrapper.m_GamePlayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ClickPC.started += instance.OnClickPC;
                @ClickPC.performed += instance.OnClickPC;
                @ClickPC.canceled += instance.OnClickPC;
                @ClickMobile.started += instance.OnClickMobile;
                @ClickMobile.performed += instance.OnClickMobile;
                @ClickMobile.canceled += instance.OnClickMobile;
            }
        }
    }
    public GamePlayActions @GamePlay => new GamePlayActions(this);
    public interface IGamePlayActions
    {
        void OnClickPC(InputAction.CallbackContext context);
        void OnClickMobile(InputAction.CallbackContext context);
    }
}
