//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/KingdomInputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @KingdomInputControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @KingdomInputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""KingdomInputControls"",
    ""maps"": [
        {
            ""name"": ""New action map"",
            ""id"": ""26141461-2228-4a51-8c83-470671d063a5"",
            ""actions"": [
                {
                    ""name"": ""Touch0Contact"",
                    ""type"": ""Value"",
                    ""id"": ""7d0248a5-1170-4c24-8a70-b1af5d9b3bbc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Touch1Contact"",
                    ""type"": ""Value"",
                    ""id"": ""ce08273c-f98d-4bc4-92d8-fda8e8321a4b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Touch0Pos"",
                    ""type"": ""Value"",
                    ""id"": ""2eba8a1b-1d52-469d-8dbf-3443cb58914d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Touch1Pos"",
                    ""type"": ""Value"",
                    ""id"": ""aedd85a1-0885-451f-8659-61931e7fc479"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Wheel"",
                    ""type"": ""Value"",
                    ""id"": ""1966e07b-0c43-4140-8564-abfdd8fdc0f2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DragPC"",
                    ""type"": ""Value"",
                    ""id"": ""e1832357-00ec-400c-b4bf-e017b8953640"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchPC"",
                    ""type"": ""Value"",
                    ""id"": ""56fa4d56-2625-42f2-a0aa-7c33f0cea65e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""07a8e386-8bc2-42fe-bc9c-29d135957b54"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch0Contact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fcf5b9a7-5f02-4cf7-b7f8-785fee305a78"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Wheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33aa76a7-a2e7-40a2-9a59-27c35d9f98e7"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DragPC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""066dff01-b17b-4e9b-a9c1-47d31c40a137"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // New action map
        m_Newactionmap = asset.FindActionMap("New action map", throwIfNotFound: true);
        m_Newactionmap_Touch0Contact = m_Newactionmap.FindAction("Touch0Contact", throwIfNotFound: true);
        m_Newactionmap_Touch1Contact = m_Newactionmap.FindAction("Touch1Contact", throwIfNotFound: true);
        m_Newactionmap_Touch0Pos = m_Newactionmap.FindAction("Touch0Pos", throwIfNotFound: true);
        m_Newactionmap_Touch1Pos = m_Newactionmap.FindAction("Touch1Pos", throwIfNotFound: true);
        m_Newactionmap_Wheel = m_Newactionmap.FindAction("Wheel", throwIfNotFound: true);
        m_Newactionmap_DragPC = m_Newactionmap.FindAction("DragPC", throwIfNotFound: true);
        m_Newactionmap_TouchPC = m_Newactionmap.FindAction("TouchPC", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // New action map
    private readonly InputActionMap m_Newactionmap;
    private INewactionmapActions m_NewactionmapActionsCallbackInterface;
    private readonly InputAction m_Newactionmap_Touch0Contact;
    private readonly InputAction m_Newactionmap_Touch1Contact;
    private readonly InputAction m_Newactionmap_Touch0Pos;
    private readonly InputAction m_Newactionmap_Touch1Pos;
    private readonly InputAction m_Newactionmap_Wheel;
    private readonly InputAction m_Newactionmap_DragPC;
    private readonly InputAction m_Newactionmap_TouchPC;
    public struct NewactionmapActions
    {
        private @KingdomInputControls m_Wrapper;
        public NewactionmapActions(@KingdomInputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Touch0Contact => m_Wrapper.m_Newactionmap_Touch0Contact;
        public InputAction @Touch1Contact => m_Wrapper.m_Newactionmap_Touch1Contact;
        public InputAction @Touch0Pos => m_Wrapper.m_Newactionmap_Touch0Pos;
        public InputAction @Touch1Pos => m_Wrapper.m_Newactionmap_Touch1Pos;
        public InputAction @Wheel => m_Wrapper.m_Newactionmap_Wheel;
        public InputAction @DragPC => m_Wrapper.m_Newactionmap_DragPC;
        public InputAction @TouchPC => m_Wrapper.m_Newactionmap_TouchPC;
        public InputActionMap Get() { return m_Wrapper.m_Newactionmap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NewactionmapActions set) { return set.Get(); }
        public void SetCallbacks(INewactionmapActions instance)
        {
            if (m_Wrapper.m_NewactionmapActionsCallbackInterface != null)
            {
                @Touch0Contact.started -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnTouch0Contact;
                @Touch0Contact.performed -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnTouch0Contact;
                @Touch0Contact.canceled -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnTouch0Contact;
                @Touch1Contact.started -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnTouch1Contact;
                @Touch1Contact.performed -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnTouch1Contact;
                @Touch1Contact.canceled -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnTouch1Contact;
                @Touch0Pos.started -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnTouch0Pos;
                @Touch0Pos.performed -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnTouch0Pos;
                @Touch0Pos.canceled -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnTouch0Pos;
                @Touch1Pos.started -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnTouch1Pos;
                @Touch1Pos.performed -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnTouch1Pos;
                @Touch1Pos.canceled -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnTouch1Pos;
                @Wheel.started -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnWheel;
                @Wheel.performed -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnWheel;
                @Wheel.canceled -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnWheel;
                @DragPC.started -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnDragPC;
                @DragPC.performed -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnDragPC;
                @DragPC.canceled -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnDragPC;
                @TouchPC.started -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnTouchPC;
                @TouchPC.performed -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnTouchPC;
                @TouchPC.canceled -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnTouchPC;
            }
            m_Wrapper.m_NewactionmapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Touch0Contact.started += instance.OnTouch0Contact;
                @Touch0Contact.performed += instance.OnTouch0Contact;
                @Touch0Contact.canceled += instance.OnTouch0Contact;
                @Touch1Contact.started += instance.OnTouch1Contact;
                @Touch1Contact.performed += instance.OnTouch1Contact;
                @Touch1Contact.canceled += instance.OnTouch1Contact;
                @Touch0Pos.started += instance.OnTouch0Pos;
                @Touch0Pos.performed += instance.OnTouch0Pos;
                @Touch0Pos.canceled += instance.OnTouch0Pos;
                @Touch1Pos.started += instance.OnTouch1Pos;
                @Touch1Pos.performed += instance.OnTouch1Pos;
                @Touch1Pos.canceled += instance.OnTouch1Pos;
                @Wheel.started += instance.OnWheel;
                @Wheel.performed += instance.OnWheel;
                @Wheel.canceled += instance.OnWheel;
                @DragPC.started += instance.OnDragPC;
                @DragPC.performed += instance.OnDragPC;
                @DragPC.canceled += instance.OnDragPC;
                @TouchPC.started += instance.OnTouchPC;
                @TouchPC.performed += instance.OnTouchPC;
                @TouchPC.canceled += instance.OnTouchPC;
            }
        }
    }
    public NewactionmapActions @Newactionmap => new NewactionmapActions(this);
    public interface INewactionmapActions
    {
        void OnTouch0Contact(InputAction.CallbackContext context);
        void OnTouch1Contact(InputAction.CallbackContext context);
        void OnTouch0Pos(InputAction.CallbackContext context);
        void OnTouch1Pos(InputAction.CallbackContext context);
        void OnWheel(InputAction.CallbackContext context);
        void OnDragPC(InputAction.CallbackContext context);
        void OnTouchPC(InputAction.CallbackContext context);
    }
}
